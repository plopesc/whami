<?php

// $Id:$

/**
 * Function that implements the Executor module request
 * @param $sources Associative array with the sorces to request and their categories
 * @param $method Metod to request, can be "bbox" or "geopoint_radius"
 * @param $parameters Array with the parameters for the executor: The parameters must be a key/value array
 * mandatory: (the four corners of the bounding box in an array or a geographical point/radius (in km))
 *  mandatory: language
 *  optional: length to which the title is shrinked for each source
 *  optional: length to which the body is shrinked for each source
 *  optional: length to which the link is shrinked for each source
 *  mandatory: number of entries to request for each source
 *  mandatory: number of entries for each source
 * 
 */
function whami_executor_process($sources, $method, $parameters) {
	
	$adapters = array();
	$cwd = $_SERVER['DOCUMENT_ROOT'] . base_path();
  $sessionID = $_COOKIE[session_name()];
  
  foreach ($parameters as $key => $value){
    $params[$key] = $parameters[$key];
  }
  
  $params['sessionID'] = $sessionID;
  $params['cwd'] = $cwd;
  $params['method'] = $method;
	
	foreach ($sources as $key => $value){
    $params['categoriesID'] = $value;
    $params['sourceID'] = $key;
    $params['titleshrink'] = $parameters['titleshrink'][$key];
    $params['bodyshrink'] = $parameters['bodyshrink'][$key];
    $params['linkshrink'] = $parameters['linkshrink'][$key];
    $params['maxRows'] = $parameters['maxRows'][$key];
    $params['maxRequestRows'] = $parameters['maxRequestRows'][$key];
		$adapters[]	= JobStartAsync($_SERVER['HTTP_HOST'], base_path() . drupal_get_path('module','whami_source_adapter_' . $key) . '/executor.php?' . http_build_query($params, '', '&'));
	}
	while (true) {
    $finish = TRUE;
    foreach ($adapters as $key => $value){
      $result = JobPollAsync($adapters[$key]);
      if ($result !== FALSE){
        $finish = FALSE;
//        echo $result;
      }
    }
    if ($finish) break;
  }
  
  $results = array();
  $result = db_query("SELECT * FROM {whami_temporary_table} where sid = '%s'", array($sessionID));
  while ($row = db_fetch_array($result)) $results[] = $row;
  db_query("DELETE FROM {whami_temporary_table} where sid = '%s'", array($sessionID));
  if(!empty($results)){
    return $results;
  }else{
    drupal_set_message(t('The source adapter doesn\'t return any result.'), 'error');
    return NULL;
  }

}

/**
 *  Function that Starts ans Asynchronuos task
 *  
 * @param unknown_type $server
 * @param unknown_type $url
 * @param unknown_type $port
 * @param unknown_type $conn_timeout
 * @param unknown_type $rw_timeout
 */
function JobStartAsync($server, $url, $port=80,$conn_timeout=30, $rw_timeout=86400)
{
  $errno = '';
  $errstr = '';
  
  set_time_limit(0);
  
  $fp = fsockopen($server, $port, $errno, $errstr, $conn_timeout);
  if (!$fp) {
     echo "$errstr ($errno)<br />\n";
     return false;
  }
  $out = "GET $url HTTP/1.1\r\n";
  $out .= "Host: $server\r\n";
  $out .= "Connection: Close\r\n\r\n";
  
  stream_set_blocking($fp, false);
  stream_set_timeout($fp, $rw_timeout);
  fwrite($fp, $out);
  
  return $fp;
}

/**
 * Function that controls an asynchronous task
 */
// returns false if HTTP disconnect (EOF), or a string (could be empty string) if still connected
function JobPollAsync(&$fp) 
{
  if ($fp === false) return false;
  
  if (feof($fp)) {
    fclose($fp);
    $fp = false;
    return false;
  }
  
  return fread($fp, 10000);
}

/**
 * Implementation of hook_menu()
 */
function whami_executor_menu(){
  $items['whami/Executor'] = array(
    'title' => 'Whami Executor',
    'access arguments' => array('geonames docs'),
    'page callback' => 'whami_executor_demo',
    'page arguments' => array(),
  	'type' => MENU_CALLBACK,
  );
  return $items;

}

/**
 * Function that implements a demo of the Executor module
 */
function whami_executor_demo(){
  $results =   whami_executor_process(array('wikipedia' => array('01', '02'),'zoom' => array('01', '02'), ), 'bbox', array('maxRows' => array('zoom' => 25, 'wikipedia' => 25), 'titleshrink' => array('zoom' => 25, 'wikipedia' => 15), 'bodyshrink' => array('zoom' => 50, 'wikipedia' => 75), 'linkshrink' => array('zoom' => 15, 'wikipedia' => 5), 'maxRequestRows' => array('zoom' => 25, 'wikipedia' => 15), 'language' => '', 'north' => 90, 'south' => -90, 'east' => 180, 'west' => -180, 'lon' => 40, 'lat' => -3, 'radius' => 40));
  return theme_table(array_keys($results[0]),$results);
}